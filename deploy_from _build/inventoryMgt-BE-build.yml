trigger:
  branches:
    include:
      - main
      - DEV

# resources:
#   repositories:
#     - repository: appsectemplates
#       type: git
#       name: DevSecOps/DevSecOps
#       endpoint: CrossOrg-Devsecops-AFR Integration Microservices

parameters:
  - name: app
    type: string
    default: "inventoryMgt-BE"

  - name: dockerfile
    type: string
    default: "Dockerfile"

  - name: devDockerRegistryServiceConnection
    type: string
    default: "ACR"

  - name: BuildAgentPoolSndbx
    type: string
    default: "AFR_Sandbox_Pool"

  - name: containerRegistry
    type: string
    default: "afrmicroservicesacr.azurecr.io"

  - name: imageRepository
    type: string
    default: "inventoryMgt-BE"

# variables:
#   - name: "vmImageName"
#     value: "ubuntu-latest"

#   - name: projectName
#     value: "onboarding-frontend"

#   - name: "sonarName"
#     value: "AFR-onboarding-FrontEnd"

#   - name: "checkmarxTeam"
#     value: 'CxServer\AB-InBev\AFR\AFR_Onboarding'

stages:
#   - stage: SCAN
#     displayName: SCAN stage
#     jobs:
#       - job: SCAN
#         displayName: scan
        # pool:
        #   vmImage: "ubuntu-latest"

#         steps:
#           - checkout: self
#           - checkout: appsectemplates

#           - template: pipeline_templates/Security_tasks/prepareSonarCloud.yml@appsectemplates
#             parameters:
#               SCServiceConnection: SonarcloudServer
#               SCProjectKey: $(sonarName)
#               SCProjectName: $(sonarName)
#               SCBranchName: "$(Build.SourceBranchName)"
#               SCBaseDirPath: "$(system.defaultworkingdirectory)"

#           - template: pipeline_templates/secure_code_scan.yml@appsectemplates
#             parameters:
#               scanSonarCloud: true
#               sonarCloudGate: false
#               SCServiceConnection: SonarcloudServer
#               scanGitLeaks: true
#               scanCheckmarx: true
#               CxServiceConnection: CheckmarxServer
#               CxTeamName: $(checkmarxTeam)
#               scanSnyk: true
#               SkServiceConnection: "SnykServer"
#               SkOrganization: "6faff7dd-4e52-4ac6-af3c-a5d1eaa27be2"
#               SkAdditionalArgs: "--all-projects --detection-depth=4"

  - stage: Build
    displayName: DEV
    # pool:
    #   name: ${{parameters.BuildAgentPoolSndbx}}
    #   demands: agent.os -equals Windows_NT
    pool:  #here using azure-hosted agent
      vmImage: "ubuntu-latest"
    variables:
      - group: "${{parameters.app}}"
    jobs:
      - job: build
        displayName: Build, push & Docker up

        steps:
          - task: Docker@2
            displayName: Build
            inputs:
              command: build
              repository: ${{parameters.imageRepository}}
              dockerfile: "$(Build.SourcesDirectory)/${{parameters.dockerfile}}"
              containerRegistry: ${{parameters.devDockerRegistryServiceConnection}}
              arguments: |
                --build-arg NEXT_PUBLIC_AUTH_TOKEN="$(NEXT_PUBLIC_AUTH_TOKEN)"
              tags: |
                latest
                $(Build.BuildNumber)

          - task: Docker@2
            displayName: Push
            inputs:
              command: push
              repository: ${{parameters.imageRepository}}
              containerRegistry: ${{parameters.devDockerRegistryServiceConnection}}
              tags: |
                latest
                $(Build.BuildNumber)

          - task: DockerCompose@0
            displayName: Docker-compose up
            inputs:
              containerregistrytype: "Container Registry"
              dockerRegistryEndpoint: ${{parameters.devDockerRegistryServiceConnection}}
              dockerComposeFile: "**/docker-compose.yml"
              # projectName: $(projectName) #'onboarding-frontend'
              action: "Run a Docker Compose command"
              dockerComposeCommand: "up"
              arguments: '-d'